var canvas = document.querySelector("canvas");
var context = canvas.getContext("2d");
var spriteSheetURL = "demos/Pacman/Sprites2.png";
var image = new Image();
image.src = spriteSheetURL;
const curMaze = 1;

function GetSpritePos(num){
    if (num < 16) {return {x:num*8, y:0}}
    else if (num < 32) {return {x:(num-16)*8, y: 8}}
    else if (num < 36) {return {x: 16, y: (num-31)*16}}
}
function GetGhostTarget(i){
    if (i == 0) return {x: pacman.x, y: pacman.y}
    else if (i == 1) return {x: pacman.x + 2*((pacman.f-2)%2), y: pacman.y + 2*((pacman.f-1)%2)}
    else return {x: 0, y: 0};
}
var mazes = [
    [
        [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07, 11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 02, 01, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 12, 12, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07, 11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 02, 01, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 20, 28, 26, 31, 31, 21, 28, 24, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 22, 16, 16, 16, 16, 16, 16, 25, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 22, 16, 16, 16, 16, 16, 16, 25, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 22, 16, 16, 16, 16, 16, 16, 25, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 18, 19, 19, 19, 19, 19, 19, 17, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 12, 12, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07, 11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 02, 01, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 12, 12, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07, 11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 02, 01, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07],
        [13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14],
        [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00],
    ],
    [
        [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 09, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 09, 00, 04, 08, 00, 04, 12, 12, 12, 12, 08, 00, 04, 08, 00, 06, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 09, 00, 06, 09, 00, 02, 03, 07, 11, 03, 01, 00, 06, 09, 00, 06, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 09, 00, 06, 09, 00, 00, 00, 06, 09, 00, 00, 00, 06, 09, 00, 06, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 09, 00, 06, 13, 12, 08, 00, 06, 09, 00, 04, 12, 14, 09, 00, 06, 00, 00, 00, 00, 00, 00],
        [03, 03, 03, 03, 03, 03, 01, 00, 06, 11, 03, 01, 00, 02, 01, 00, 02, 03, 07, 09, 00, 02, 03, 03, 03, 03, 03, 03],
        [00, 00, 00, 00, 00, 00, 00, 00, 06, 09, 00, 00, 00, 00, 00, 00, 00, 00, 06, 09, 00, 00, 00, 00, 00, 00, 00, 00],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 12, 12, 12, 08, 00, 06, 13, 12, 12, 12, 08, 00, 04, 12, 12],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 07, 11, 03, 01, 00, 06, 11, 03, 03, 03, 01, 00, 02, 03, 07],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 00, 00, 00, 06, 09, 00, 00, 00, 00, 00, 00, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 06, 09, 00, 04, 12, 14, 09, 00, 04, 12, 12, 12, 08, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 02, 01, 00, 02, 03, 03, 01, 00, 06, 11, 03, 03, 01, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 06, 09, 00, 00, 00, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 20, 28, 26, 31, 31, 21, 28, 24, 00, 04, 12, 14, 09, 00, 04, 12, 12, 14],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 22, 16, 16, 16, 16, 16, 16, 25, 00, 02, 03, 03, 01, 00, 06, 11, 03, 03],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 22, 16, 16, 16, 16, 16, 16, 25, 00, 00, 00, 00, 00, 00, 06, 09, 00, 00],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 22, 16, 16, 16, 16, 16, 16, 25, 00, 04, 12, 12, 08, 00, 02, 01, 00, 04],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 18, 19, 19, 19, 19, 19, 19, 17, 00, 02, 03, 07, 09, 00, 00, 00, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 09, 00, 04, 08, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 00, 04, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 08, 00, 06, 09, 00, 06, 09, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 00, 02, 03, 03, 03, 03, 07, 11, 03, 03, 03, 03, 01, 00, 06, 09, 00, 06, 09, 00, 02],
        [11, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 06, 09, 00, 00, 00, 00, 00, 00, 06, 09, 00, 06, 09, 00, 00],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 06, 09, 00, 04, 12, 12, 12, 12, 14, 09, 00, 06, 13, 12, 12],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 02, 01, 00, 02, 03, 03, 03, 03, 03, 01, 00, 02, 03, 03, 07],
        [11, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06],
        [11, 03, 03, 03, 03, 04, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 08, 00, 04, 08, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 09, 00, 06, 09, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 09, 00, 06, 09, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 09, 00, 02, 01, 00, 06],
        [11, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 09, 00, 00, 00, 00, 06],
        [13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 00, 00, 00, 00, 00, 00, 00, 00, 00, 13, 12, 12, 12, 12, 14],
        [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00],
        [00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00],
    ],
];
var ghosts = [
    {x: 12, y: 15, facing: 1+2, state: "chase"},
    {x: 13, y: 15, facing: 1+2, state: "chase"},
    {x: 14, y: 15, facing: 1+2, state: "chase"},
    {x: 15, y: 15, facing: 1+2, state: "chase"},
    //{x: 11, y: 18, facing: 0, state: "sleep"},
    //{x: 13, y: 18, facing: 2, state: "sleep"},
    //{x: 15, y: 18, facing: 0, state: "sleep"},
];
var pacman = {x: 13, y: 21, f:1};

image.onload = function() {
    RenderMaze();
    RenderGhosts();
    ComputeGhosts();
    setInterval(RenderMaze, 100);
    setInterval(RenderGhosts, 100);
    setInterval(ComputeGhosts, 100);
}

function RenderMaze() {
    context.drawImage(
        image,
        132, 12,
        8, 8,
        0, 0,
        224, 288,
    );
    for (let y = 0; y < 36; y++) {
        for (let x = 0; x < 28; x++) {
            var p = GetSpritePos(mazes[curMaze][y][x]);
            context.drawImage(
                image,
                p.x, p.y,
                8, 8,
                x*8, y*8,
                8, 8,
            );
        }
    }
}
function RenderGhosts() {
    for (let i = 0; i < 4; i++){
        var c = ghosts[i];
        var p = GetSpritePos(32+i);
        context.drawImage(
            image,
            p.x, p.y,
            8, 8,
            c.x*8-4, c.y*8-4,
            8, 8,
        );
        context.drawImage(
            image,
            p.x+8, p.y,
            8, 8,
            c.x*8+4, c.y*8-4,
            8, 8,
        );
        context.drawImage(
            image,
            p.x, p.y+8,
            8, 8,
            c.x*8-4, c.y*8+4,
            8, 8,
        );
        context.drawImage(
            image,
            p.x+8, p.y+8,
            8, 8,
            c.x*8+4, c.y*8+4,
            8, 8,
        );
    }
}
function ComputeGhosts() {
    for (let i = 0; i < 4; i++){
        var c = ghosts[i];
        if (c.state != "chase") continue;
        let o = [];
        for (let d = 0; d < 4; d++){
            //console.log(c.facing + ", " +d);
            if (((c.facing+2)%4) == d) continue;
            let m = {x:0, y:0, f:d};
            if (d == 0) m.y = -1;
            else if (d == 1) m.x = -1;
            else if (d == 2) m.y = 1;
            else if (d == 3) m.x = 1;
            const w = mazes[curMaze][c.y+m.y][c.x+m.x]
            //console.log(w);
            if (w != 0 && w != undefined) continue;
            context.drawImage(
                image,
                128, 0,
                8, 8,
                (m.x+c.x)*8, (m.y+c.y)*8,
                8, 8,
            );
            o[d] = m;
        }
        const t = GetGhostTarget(i);
        context.drawImage(
            image,
            4, 20+i*16,
            8, 8,
            (t.x)*8, (t.y)*8,
            8, 8,
        );
        let b = {x:0, y:0, f:0, d:10000000};
        for (let d = 0; d < 4; d++){
            if (o[d] == undefined) continue;
            m = o[d];
            m.d = (c.x+m.x-t.x)*(c.x+m.x-t.x) + (c.y+m.y-t.y)*(c.y+m.y-t.y);
            //console.log(m.f + ", " + m.x + ", " + m.y + ", " + m.d);
            if (m.d < b.d){
                b = m;
                //console.log(m.f + ", " + m.x + ", " + m.y + ", " + m.d);
            }
        }
        context.drawImage(
            image,
            144, 0,
            8, 8,
            (b.x+c.x)*8, (b.y+c.y)*8,
            8, 8,
        );
        //console.log("Moved: "+c.x + ", "+c.y)
        c.x = (c.x + b.x+28)%28;
        c.y = c.y + b.y;
        c.facing = b.f;
    }
}